#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-sequelize');
var http = require('http');
var models = require('../models');

var uuid = require('uuid/v4');

var session = require('express-session');
var SequelizeStore = require('connect-session-sequelize')(session.Store);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);

models.sequelize.sync({
    //force: true
}).then(function() {
    /**
     * Listen on provided port, on all network interfaces.
     */

    models.sequelize.models.User.hasMany(models.tasks, {
        foreignKey: 'taskRequester',
        as: 'userRequester'
    });

    models.sequelize.models.User.hasMany(models.tasks, {
        foreignKey: 'taskAccepter',
        as: 'userAccepter'
    });

    models.sequelize.sync();

    models.tasks.belongsTo(models.sequelize.models.User, {
        targetKey: 'uuid',
        foreignKey: 'taskAccepter',
        as: 'userAccepter'
    });

    models.tasks.belongsTo(models.sequelize.models.User, {
        targetKey: 'uuid',
        foreignKey: 'taskRequester',
        as: 'userRequester'
    });


    models.calendarUser.belongsTo(models.sequelize.models.User, {
        foreignKey: {
            name: 'calendarUserUUID'
        },
        as: 'calendarUsers'
    });

    models.calendarUser.belongsTo(models.calendar, {
        foreignKey: {
            name: 'calendarID'
        },
        as: 'calendars'
    });

    models.sequelize.models.User.hasMany(models.calendarUser, {
        foreignKey: {
            name: 'calendarUserUUID'
        }
    });

    models.calendar.hasMany(models.calendarUser, {
        foreignKey: {
            name: 'calendarID'
        }
    });

    models.sequelize.sync();

    server.listen(port, function() {
        console.log("server up");
        debug('Express server listening on port ' + server.address().port);
    });
    server.on('error', onError);
    server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var snapshot = new Date();
    var time = snapshot.toTimeString();
    console.log(time + " ==> 🌎  Listening on port " + port);
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
